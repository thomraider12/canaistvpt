name: Atualizar EPG
on:
  schedule:
    - cron: "0 */12 * * *"
  workflow_dispatch:

jobs:
  Update-EPG:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: checkout iptv-org/epg repo
        uses: actions/checkout@v4
        with:
          repository: iptv-org/epg
          path: iptv-org-epg

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Instalar dependências
        run: |
          cd EPG/scripts
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Atualizar EPGs principais
        run: sh EPG/scripts/epg-pt.sh

      - name: Atualizar listas Opto SIC
        run: |
          python EPG/scripts/opto.py
          python EPG/scripts/opto2.py
          rm EPG/epg-sic-pt.json

      - name: Atualizar listas Rakuten
        run: |
          cd EPG/scripts
          python rakuten.py

      - name: Atualizar listas FamaTV
        run: |
          cd EPG/scripts
          python famatv.py
          cd -
          cd EPG
          rm -f epg-fama-pt.xml.xz
          xz -z epg-fama-pt.xml

      - name: Atualizar listas extra
        run: |
          cd EPG/scripts
          python extra.py
          cd -
          cd EPG
          rm -f epg-extra-pt.xml.xz
          xz -z epg-extra-pt.xml

      - name: setup git config
        run: |
          git config user.name "EPG's bot"
          git config user.email "<>"

      - name: commit
        run: |
          git pull
          cd EPG && git add .
          git commit -m "Atualizar EPG's"
          git push origin main

  Merge-EPG:
    runs-on: ubuntu-latest
    needs: Update-EPG  # Espera o job anterior terminar
    steps:
    - name: checkout
      uses: actions/checkout@v4

    - name: Instalar xmlstarlet
      run: |
        sudo apt update
        sudo apt install curl xz-utils gzip xmlstarlet

          - name: Baixar e fazer merge das EPGs
        run: |
          # URLs das EPGs
          urls=(
              "https://github.com/thomraider12/canaistvpt/raw/main/EPG/epg-pt.xml.xz"
              "https://github.com/thomraider12/canaistvpt/raw/main/EPG/epg-fama-pt.xml.xz"
              "https://github.com/thomraider12/canaistvpt/raw/main/EPG/epg-sic-pt.xml.xz"
              "https://github.com/thomraider12/canaistvpt/raw/main/EPG/epg-extra-pt.xml.xz"
              "https://github.com/thomraider12/canaistvpt/raw/main/EPG/epg-rakuten-tv.xml.xz"
              "https://github.com/matthuisman/i.mjh.nz/raw/refs/heads/master/all/epg.xml.gz"
          )

          # Diretório temporário para armazenar os arquivos baixados
          temp_dir="./epg_temp"
          mkdir -p "$temp_dir"

          # Caminho para o arquivo final dentro da pasta EPG
          final_output="./EPG/all.xml"

          # Baixar e descompactar os arquivos
          for url in "${urls[@]}"; do
              filename=$(basename "$url")
              temp_file="$temp_dir/$filename"

              # Baixa o arquivo
              echo "Baixando $url..."
              curl -L -o "$temp_file" "$url"

              # Descompacta dependendo da extensão
              if [[ "$filename" == *.xz ]]; then
                  echo "Descompactando $filename (XZ)..."
                  xz -d -k "$temp_file" # -k para manter o arquivo original
              elif [[ "$filename" == *.gz ]]; then
                  echo "Descompactando $filename (GZ)..."
                  gunzip -k "$temp_file"
              fi
          done

          # Combinar todos os arquivos XML descompactados
          echo "Fazendo merge dos arquivos XML..."

          # Arquivo temporário para o merge
          merged_file="$temp_dir/merged.xml"

          # Inicializa o arquivo final com o cabeçalho do XML
          echo '<?xml version="1.0" encoding="UTF-8"?>' > "$merged_file"
          echo '<tv>' >> "$merged_file"

          # Concatena o conteúdo dos arquivos XML
          for xml_file in "$temp_dir"/*.xml; do
              # Verifica se o arquivo XML é válido antes de processar
              if xmllint --noout "$xml_file"; then
                  # Remove a linha DOCTYPE se existir e adiciona o conteúdo
                  echo "Processando $xml_file..."
                  # Remover DOCTYPE, adicionar conteúdo e manter apenas elementos filhos de <tv>
                  xmlstarlet ed -d "//tv" "$xml_file" | xmlstarlet sel -t -c "//tv/*" >> "$merged_file"
              else
                  echo "Arquivo XML inválido: $xml_file. Ignorando."
              fi
          done

          # Fecha a tag <tv>
          echo '</tv>' >> "$merged_file"

          # Certifique-se de que o diretório EPG existe
          mkdir -p ./EPG

          # Compacta o arquivo final e salva na pasta EPG
          echo "Compactando para $final_output.xz..."
          xz -z "$merged_file" -c > "$final_output.xz"

          # Limpa arquivos temporários
          rm -rf "$temp_dir"

    - name: setup git config
      run: |
          git config user.name "EPG's bot"
          git config user.email "<>"

    - name: commit merged EPG
      run: |
        git pull
        git add all.xml.xz
        git commit -m "Merge das EPG's"
        git push origin main
