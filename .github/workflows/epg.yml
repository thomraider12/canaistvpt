name: Atualizar EPG
on:
  schedule:
    - cron: "0 */12 * * *"
  workflow_dispatch:

jobs:
  Update-EPG:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout iptv-org/epg repo
        uses: actions/checkout@v4
        with:
          repository: iptv-org/epg
          path: iptv-org-epg

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Instalar dependências
        run: |
          cd EPG/scripts
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Atualizar EPGs principais
        run: sh EPG/scripts/epg-pt.sh

      - name: Atualizar listas Opto SIC
        run: |
          python EPG/scripts/opto.py
          python EPG/scripts/opto2.py
          rm EPG/epg-sic-pt.json

      - name: Atualizar listas Rakuten
        run: |
          cd EPG/scripts
          python rakuten.py

      - name: Atualizar listas FamaTV
        run: |
          cd EPG/scripts
          python famatv.py
          cd - 
          cd EPG
          rm -f epg-fama-pt.xml.xz
          xz -z epg-fama-pt.xml

      - name: Atualizar listas extra
        run: |
          cd EPG/scripts
          python extra.py
          cd - 
          cd EPG
          rm -f epg-extra-pt.xml.xz
          xz -z epg-extra-pt.xml

      - name: Baixar e mesclar EPGs
        run: |
          #!/bin/bash

          # Este script baixa arquivos EPG e os mescla em um único arquivo.

          ## VARIÁVEIS
          BASEPATH="./epg_temp"  # Diretório temporário

          LISTS=(
            "https://github.com/thomraider12/canaistvpt/raw/main/EPG/epg-pt.xml.xz"
            "https://github.com/thomraider12/canaistvpt/raw/main/EPG/epg-fama-pt.xml.xz"
            "https://github.com/thomraider12/canaistvpt/raw/main/EPG/epg-sic-pt.xml.xz"
            "https://github.com/thomraider12/canaistvpt/raw/main/EPG/epg-extra-pt.xml.xz"
            "https://github.com/thomraider12/canaistvpt/raw/main/EPG/epg-rakuten-tv.xml.xz"
            "https://github.com/matthuisman/i.mjh.nz/raw/refs/heads/master/all/epg.xml.gz"
          )

          # Criar diretório para os arquivos EPG
          mkdir -p "$BASEPATH"

          downloadepgs() {
              INDEX=1
              for list in "${LISTS[@]}"; do
                  sleep 1
                  dir="$(TMPDIR=$PWD mktemp -d)"  ## cria um diretório temporário
                  wget -q --show-progress -P "$dir" --content-disposition --trust-server-names "$list"
                  for file in "$dir"/*; do
                      ext="${file##*.}"
                      echo "Extensão = $ext. Renomeando para $BASEPATH/$INDEX.$ext"
                      mv "$file" "$BASEPATH/$INDEX.$ext"
                  done
                  rmdir "$dir"
                  let INDEX=${INDEX}+1
              done
          }

          extractgz() {
              echo "Extraindo arquivos compactados..."
              gunzip -f "$BASEPATH"/*.gz
              sleep 2
              ## Corrige a extensão para arquivos que não têm a extensão .xml
              for file in "$BASEPATH"/*.gz; do
                  if [[ -f $file ]]; then
                      mv "$file" "${file%.gz}.xml"
                  fi
              done
          }

          extractxz() {
              echo "Extraindo arquivos .xz..."
              for file in "$BASEPATH"/*.xz; do
                  if [[ -f $file ]]; then
                      xz -d "$file"  # Extrai arquivos .xz
                  fi
              done
          }

          mergeall() {
              fileslist=( $(ls $BASEPATH/*.xml) )
              
              # MERGE O Primeiro 2
              echo "Mesclando ${fileslist[0]} com ${fileslist[1]}"
              xmlstarlet ed -d '//tv' "${fileslist[0]}" | xmlstarlet ed -d '//tv' "${fileslist[1]}" > "$BASEPATH/merged.xmltv"

              # Mescla os restantes
              for i in $(seq 2 ${#fileslist[@]}); do
                  if [ ! -z "${fileslist[$i]}" ]; then
                      echo "Mesclando ${fileslist[$i]}... "
                      xmlstarlet ed -d '//tv' "$BASEPATH/merged.xmltv" | xmlstarlet ed -d '//tv' "${fileslist[$i]}" >> "$BASEPATH/merged.xmltv
                  fi
              done
          }

          # Função principal
          getall() {
              downloadepgs
              extractgz
              extractxz
          }

          getall
          mergeall

          ## Limpeza
          echo "Limpando..."
          rm "$BASEPATH"/*.xml

          echo "Concluído!"
          sleep 3

      - name: Setup Git Config
        run: |
          git config user.name "EPG's bot"
          git config user.email "<>"

      - name: Commit
        run: |
          git pull
          cd EPG && git add .
          git commit -m "Atualizar EPG's"
          git push origin main
