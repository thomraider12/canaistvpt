name: Atualizar EPG

on:
  schedule:
    - cron: "0 */12 * * *"
  workflow_dispatch:

jobs:
  Update-EPG:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Checkout do repositório iptv-org/epg
        uses: actions/checkout@v4
        with:
          repository: iptv-org/epg
          path: iptv-org-epg

      - name: Configurar Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Instalar dependências
        run: |
          cd EPG/scripts
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Atualizar EPGs principais
        run: sh EPG/scripts/epg-pt.sh

      - name: Atualizar lista PlutoTV
        run: |
          cd EPG
          wget -O epg-pluto-tv.xml.gz "https://github.com/matthuisman/i.mjh.nz/raw/refs/heads/master/PlutoTV/all.xml.gz"
          gunzip epg-pluto-tv.xml.gz
          rm -f epg-pluto-tv.xml.xz
          xz -z epg-pluto-tv.xml

      - name: Atualizar lista SamsungTVPlus
        run: |
          cd EPG
          wget -O epg-samsung-tvplus.xml.gz "https://github.com/matthuisman/i.mjh.nz/raw/refs/heads/master/SamsungTVPlus/all.xml.gz"
          gunzip epg-samsung-tvplus.xml.gz
          rm -f epg-samsung-tvplus.xml.xz
          xz -z epg-samsung-tvplus.xml

      - name: Atualizar lista Opto SIC
        run: |
          python EPG/scripts/opto.py
          python EPG/scripts/opto2.py
          rm EPG/epg-sic-pt.json

      - name: Atualizar listas RakutenTV
        run: |
          cd EPG/scripts
          python rakuten.py

      - name: Atualizar listas FamaTV
        run: |
          cd EPG/scripts
          python famatv.py
          cd -
          cd EPG
          rm -f epg-fama-pt.xml.xz
          xz -z epg-fama-pt.xml

      - name: Atualizar listas extra
        run: |
          cd EPG/scripts
          python extra.py
          cd -
          cd EPG
          rm -f epg-extra-pt.xml.xz
          xz -z epg-extra-pt.xml

      - name: Configurar Git
        run: |
          git config user.name "EPG's bot"
          git config user.email "<>"

      - name: Commit das atualizações
        run: |
          git pull
          cd EPG && git add .
          git commit -m "Atualizar EPG's"
          git push origin main

  Merge-EPGs:
    runs-on: ubuntu-latest
    needs: Update-EPG  # Depende da conclusão do job Update-EPG
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Instalar xmllint
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils

      - name: Merge EPGs
        run: |
          cd EPG
          rm -f all.xml.xz
          cd -
          # Diretório onde estão as EPGs
          EPG_DIR="EPG"
          
          # Descompacta todos os arquivos .xml.gz
          find "$EPG_DIR" -name "*.xml.gz" -exec gunzip {} \;

          # Cria o arquivo final de EPG
          OUTPUT_FILE="$EPG_DIR/all.xml"

          # Adiciona a declaração XML e a tag de abertura <tv> e <channels>
          echo "<?xml version='1.0' encoding='utf-8'?>" > "$OUTPUT_FILE"
          echo "<tv>" >> "$OUTPUT_FILE"
          echo "<channels>" >> "$OUTPUT_FILE"

          # Para cada arquivo XML, remove a declaração XML, tags desnecessárias e adiciona o conteúdo ao arquivo final
          for file in "$EPG_DIR"/*.xml; do
            # Verifica se o arquivo existe e não está vazio
            if [[ -s "$file" ]]; then
              # Extrai apenas as linhas que estão dentro da tag <channels>
              sed -n '/<channels>/,/<\/channels>/p' "$file" | sed '1d;$d' >> "$OUTPUT_FILE"
            else
              echo "O arquivo $file está vazio ou não existe!"
            fi
          done

          # Adiciona a tag de fechamento </channels> e </tv>
          echo "</channels>" >> "$OUTPUT_FILE"
          echo "</tv>" >> "$OUTPUT_FILE"

          # Valida o arquivo XML final
          xmllint --noout "$OUTPUT_FILE"

          # Comprime o arquivo final para .xz
          xz -z "$OUTPUT_FILE"


      - name: Configurar Git
        run: |
          git config user.name "EPG's bot"
          git config user.email "<>"

      - name: Commit das alterações
        run: |
          git pull
          git add EPG/all.xml.xz
          git commit -m "Merged all EPGs into all.xml.xz"
          git push origin main
