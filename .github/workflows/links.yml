name: Atualizar links e verificá-los
on:
  schedule:
    - cron: '30 */4 * * *'
  workflow_dispatch:

jobs:
  update-stream:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Atualizar links
        run: |
          #!/bin/bash
          file1="m3u8s/cnnpt.m3u8"
          file2="m3u8s/tvi.m3u8"

          for file in "$file1" "$file2"; do
            sed -i "s#wmsAuthSign=[^&]*#wmsAuthSign=$(wget -qO- https://services.iol.pt/matrix?userId -o /dev/null)#g" "$file"
          done
          echo "Ficheiros atualizados."
          exit 0

      - name: Setup Git config
        run: |
          git config user.name "tvi-pt ch bot"
          git config user.email "<>"

      - name: Commit e Push
        run: |
          git pull
          git add m3u8s/cnnpt.m3u8
          git add m3u8s/tvi.m3u8
          git commit -m "Atualização automática dos m3u8"
          git push origin main

  test-streams:
    runs-on: ubuntu-latest
    needs: update-stream  # Espera o job anterior terminar
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get install -y ffmpeg

      - name: Test Streams
        run: |
          cd logs
          # Verifica se o arquivo channels-link.txt existe e não está vazio
          if [ ! -s channels-link.txt ]; then
            echo "Error: channels-link.txt not found or empty" | tee stream-test-results.txt
            exit 1
          fi

          # Limpa o arquivo de resultados anterior, se existir
          : > stream-test-results.txt

          while read stream; do
            echo "Testing stream: $stream"
            
            # Verifica se o link está acessível
            if curl --max-time 10 -s -o /dev/null "$stream"; then
              # Testa o stream com timeout e detecção de erro
              if ffmpeg -timeout 5 -err_detect explode -i "$stream" -t 5 -v error -stats -y -f null -; then
                echo "Stream $stream is working" | tee -a stream-test-results.txt
              else
                echo "Stream $stream failed" | tee -a stream-test-results.txt
              fi
            else
              echo "Stream $stream não está acessível" | tee -a stream-test-results.txt
            fi
          done < channels-link.txt

          echo "Testes finalizados. Resultados disponíveis em stream-test-results.txt"

      - name: Setup Git config
        run: |
          git config user.name "channel bot"
          git config user.email "<>"

      - name: Commit e Push
        run: |
          git pull
          git add logs/stream-test-results.txt
          git commit -m "log - verificação de canais"
          git push origin main
